{
    "collab_server" : "",
    "contents" : "---\ntitle: \"ggGalentine\"\nsubtitle: \"Power to the R Ladies\"\nauthor: \"Heike Hofmann\"\ndate: \"2018/2/13\"\nratio: 16x10\noutput:\n  rmdshower::shower_presentation:\n    self_contained: false\n    katex: true\n    theme: ribbon\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(message = FALSE, warning = FALSE, cache = FALSE)\n```\n\n\n## ggGalentine {.white}\n\n<img class=\"cover\" src=\"images/medley.png\" alt=\"\", width=2000>\n\n\n## What is Galentine's day?\n\n> Oh it’s only the best day of the year. Every February 13th, my lady friends and I leave our husbands and our boyfriends at home, and we just come and kick it, breakfast-style. **Ladies celebrating ladies.** It’s like Lilith Fair, minus the angst. Plus frittatas.\n\n**Leslie Knope, Parks & Rec**\n\n# `ggplot2` \n\n## `ggplot2` is ...\n\n- Wildly popular package for statistical graphics: by now about 400k monthly downloads from CRAN ( more than 10k times per day)\n\n```{r, echo=FALSE, message=FALSE}\nlibrary(\"dlstats\")\nlibrary(ggplot2)\nlibrary(gretchenalbrecht)\ncsafe <- make_palette(\"/Users/heike/CSAFE/CSAFE Logo.png\")\ncols12 <- get_pal(13, csafe) \n\n\ndframe <- cran_stats(\"ggplot2\")\ndframe$month <- lubridate::month(dframe$end)\nggplot(data = dframe[-nrow(dframe),], \n       aes(x = end, weight = downloads/1000, fill=factor(month))) + \n  geom_bar(width=28) + \n  ylab(\"Number of monthly downloads (in thousands)\") + xlab(\"Date\") +\n  ggtitle(\"Number of monthly downloads of ggplot2\") +\n  theme_bw() +\n  scale_fill_manual(values=cols12$col[-1]) +\n  theme(legend.position=\"none\")\n```\n\n## `ggplot2` is ...\n\n- Developed by Hadley Wickham (An ISU Alumni)\n- Designed to adhere to good graphical practices\n- Constructs plots using the concept of layers\n- Supports a wide variety plot types and extensions<br><br><br><br><br><br>\n- http://ggplot2.org/book/ or Hadley's book *ggplot2: Elegant Graphics for Data Analysis* for reference \n\n## Grammar of Graphics\n\nA graphical representation (plot) consists of:\n\n1. **mappings** (`aes`):  data variables are mapped to graphical elements\n2. **layers**:  geometric elements (`geoms`, such as points, lines, rectangles, text, ...) and statistical transformations (`stats`, are identity, counts, bins, ...)\n3. **scales**: map values in the data space to values in an aesthetic space (e.g. color, size, shape, but also position)\n4. **coordinate system** (`coord`): normally Cartesian, but pie charts use e.g. polar coordinates\n5. **facetting**: for small multiples (subsets) and their arrangement\n6. **theme**: fine-tune display items, such as font and its size, color of background, margins, ...\n\n\n## Telling stories with graphics\n\nAndrew Flowers (Rstudio conference, 2018): What makes a data story worth telling?\n\n<div class=\"double\">\n<p class=\"double-flow\">\n\n\n1. Novelty\n2. Outlier\n3. Archetype\n4. Trend\n5. Debunking\n6. Forecast\n</p><p class=\"double-flow\">\n*Where is the danger?*\n\n1. Triviality\n2. Spurious result\n3. Oversimplification\n4. Variance\n5. Confirmation Bias\n6. Overfitting\n</p>\n</div>\n\n## Story telling - what is the story?\n\n```{r, fig.width=4.5, fig.height=4.5}\nstations <- read.csv(\"data/stations.csv\")\nstations %>% ggplot(aes(x = long, y = lat)) + \n  geom_point() + coord_equal()\n```\n\n## Story telling\n\nData is collected within a context -  visually we can provide context with layers (using `ggmap` by David Kahle):\n\n```{r, echo=FALSE, fig.width=4.5, fig.height=4.5, message=FALSE}\nlibrary(ggmap)\nif (file.exists(\"data/dc.rds\")) {\n  dc <- readRDS(\"data/dc.rds\")\n} else {\n  dc <- get_map(\"washington dc\", zoom=10)\n  saveRDS(dc, \"data/dc.rds\")\n}\nggmap(dc, extent = \"normal\") + \n  geom_point(aes(x = long, y = lat), data = stations) +\n  ggthemes::theme_map()\n\n```\n\n\n\n\n## capital bikesharing\n\nCapital bikeshare is DC company; in 2017, 3.7 million bike trips were made \n\n```{r, fig.width=6, fig.height=4}\ntrips <- readRDS(\"data/trips-2017.rds\")\ntrips %>% ggplot(aes(x = `Duration (ms)`/1000/60)) + \n  geom_histogram(binwidth=15) + xlab(\"Trip Duration (in mins)\")\n```\n\n\n## Context provides a frame to ask questions\n\nWhere are the metro stations?\n\n```{r, echo=FALSE, fig.width=4.5, fig.height=4.5, message=FALSE}\nstations$Metro = FALSE\nidx <- grep(\"Metro\", stations$name)\nstations$Metro[idx] <- TRUE\n\nggmap(dc, extent = \"normal\") + \n  geom_point(aes(x = long, y = lat, colour=Metro), \n             data = filter(stations, !Metro)) +\n  geom_point(aes(x = long, y = lat, colour=Metro), \n             data = filter(stations, Metro)) +\n  ggthemes::theme_map() +\n  scale_colour_manual(\"Metro Station\", values = c(\"grey40\", \"darkorange\")) \n\n  \n```\n\n## Where are they biking? - Zoom into Rockville\n\nThickness of lines shows number of rentals - metro stations are popular start and end stations\n\n\n<div class=\"double\">\n<p class=\"double-flow\">\n![](images/geomnet-rockville.png)\n</p><p class=\"double-flow\">\n<br><br><br>\nMade with R package `geomnet` by Sam Tyner\n</p>\n</div>\n\n\n\n## Who is biking when?\n\n- Regular members bike during the week, casual riders during the weekend\n\n\n```{r, echo=FALSE, fig.height=4, message=FALSE}\nlibrary(ggmosaic)\ntrips %>% group_by(Day, `Member type`) %>% tally() %>%\n  ggplot(aes(x = product(Day), weight=n, fill=`Member type`)) +\n  geom_mosaic()\n```\n\n- Used `ggmosaic` package by Haley Jeppson\n\n\n## { .fullpage .white}\n\n<div class=\"fullpage width\">\n\n```{r, echo=FALSE, fig.width=8, fig.height=5}\nhourlies <- trips %>% \n  group_by(Year, Month, Mdate, Day, hour, `Member type`) %>%\n  summarise(\n    Hourly_counts = n(),\n    Date = as.Date(`Start date`)[1]\n  )\nlibrary(sugrrants)\ncalendar_df <- hourlies %>% filter(`Member type`==\"Member\") %>%\n  ungroup() %>%\n  mutate(\n    Weekend = if_else(Day %in% c(\"Saturday\", \"Sunday\"), \"Weekend\", \"Weekday\")\n  ) %>%\n  frame_calendar(\n    x = hour, y = Hourly_counts, date = Date, calendar = \"monthly\"\n  ) \n\np <- calendar_df %>% \n  ggplot(aes(x = .hour, y = .Hourly_counts, group = Date, colour = Weekend)) +\n  geom_line() + \n  theme_bw() +\n  theme(legend.position = \"bottom\")\nprettify(p, label.padding = unit(0.08, \"lines\"))\n```\n</div>\n\n\n## What can we see?\n\n\n- Clear distinction between work days and the weekend:\n    - Commute peaks on work days\n    - holidays, e.g. in January: New Year's day, MLK\n- Inauguration on Jan 20, Science march on Jan 21 (more rentals on Sat)    \n- Weather events: there was freezing rain and snow in the afternoon of Nov 7\n- US traditions: biking is not generally an activity associated with Thanksgiving<br><br>\n- plot made with the package `sugrrants` by Earo Wang\n\n## { .fullpage .white}\n\n<div class=\"fullpage width\">\n\n```{r, echo=FALSE, fig.width=8, fig.height=5}\nhourlies <- trips %>% \n  group_by(`Start station number`, `Start station`, Year, Month, Mdate, Day, hour) %>%\n  summarise(\n    Hourly_counts = n(),\n    Date = as.Date(`Start date`)[1]\n  )\nlibrary(sugrrants)\ncalendar_df <- hourlies %>% filter(`Start station number` %in% c(31623, 31258, 31247)) %>%\n  ungroup() %>%\n  mutate(\n    Weekend = if_else(Day %in% c(\"Saturday\", \"Sunday\"), \"Weekend\", \"Weekday\")\n  ) %>%\n  frame_calendar(\n    x = hour, y = Hourly_counts, date = Date, calendar = \"monthly\"\n  ) \n\np <- calendar_df %>% \n  ggplot(aes(x = .hour, y = .Hourly_counts, \n             group = interaction(Date, `Start station number`), \n             colour = `Start station`)) +\n  geom_line() + \n  theme_bw() +\n  theme(legend.position = \"bottom\")\nprettify(p, label.padding = unit(0.08, \"lines\"))\n```\n</div>\n\n## `ggplot2`\n\n- good theoretical foundation\n- community contributions make R and `ggplot2` great <br><br><br><br><br>\n- Let's look more closely at the R community ... drawing heavily on Di Cook's material for WSDS 2016\n\n# genderize\n\n## genderize.io\n\n<img src=\"images/genderize.png\" alt=\"genderize.io\" style=\"width:800px;vertical-align:top;float:right;\">\n\n\n## `genderizeR` package {.smaller}\n\nKamil Wais (2016). genderizeR: Gender Prediction Based on First Names. R\n  package version 2.0.0. https://CRAN.R-project.org/package=genderizeR\n  \n```{r results='hide', cache=TRUE, message=FALSE}\nsuppressMessages(library(genderizeR))\n\ngivenNames <- findGivenNames(c(\"heike\", \"sam\", \"samantha\", \"haley\", \"hadley\", \"Tes\", \"Jing\", \"Jackie\"))\n```\n```{r}\ngivenNames\n```\n\n##\n\n- results from findGivenNames build database to be used in `genderize` function \n- genderize.io API restricts to at most free 1000 checks a day\n- genderize.io  allows for country specification, but `findGivenNames` doesn't support that yet\n\n# R package authors\n\n## Collect the list from RStudio's CRAN mirror\n\n- Download package details from [http://cran.rstudio.com//web/packages/packages.rds](http://cran.rstudio.com//web/packages/packages.rds)\n\n```{r}\ndb <- readRDS(\"data/packages.rds\")\nglimpse(db)\n```\n\n## Identify first names\n\n\n```{r echo=FALSE}\nlibrary(stringr)\nlibrary(Hmisc)\nmaintainer_year_unclean <- data.frame(db, stringsAsFactors = FALSE) %>% transmute(\n    name = Maintainer,\n    year = as.integer(substr(Published, 1, 4)),\n    author = Author,\n    title = Title\n  )\n\nclean_up <- function(x){\n  # get rid of punctuation\n  x1 <- gsub(\"[[:punct:]]\", \" \", x)\n  # remove leading space before first name\n  x2 <- str_trim(x1 , side=\"left\")\n  # get first name only\n  x3 <- sapply(x2, function(x) strsplit(x, \"[^[:alnum:]]+\")[[1]][1])\n  # gender function only takes lower case\n  x4 <- tolower(x3)\n  return(x4)\n}\nmaintainer_year_clean <- maintainer_year_unclean %>% mutate(\n  firstname = clean_up(name)\n)\n```\n\n```{r}\nglimpse(maintainer_year_clean)\n```\n\n\n\n## Manually edited name list\n\n- First names of *maintainers* of R packages, genderized in March 2016, updated in February 2018\n- Manually edited to give some guesses for non-European names \n- Still problematic:\n    - first word in maintainer is assumed to be first name \n    - multiple authors? \n    - binary gender assignment ...\n  \n## \n\n```{r}\ngenderized_names <- read_csv(\"data/all_names_manual.csv\")\nmaintainer_year_clean <- left_join(maintainer_year_clean,\n                                   genderized_names, by=\"firstname\")\nmaintainer_year_clean <- maintainer_year_clean %>% filter(firstname != \"orphaned\") \nglimpse(maintainer_year_clean)\n```\n\n## Create summaries\n\n```{r}\nmaintainer_year_clean %>%  \n  group_by(gender) %>% tally()\n```\n\n## Plot counts\n\n```{r fig.width=5, fig.height=4, fig.align='center'}\nggplot(maintainer_year_clean, aes(x=gender, fill=gender)) +\n  geom_bar() +\n  scale_fill_manual(\"\", values=c(\"female\"=\"#fc8d59\", \"male\"=\"#2166ac\"),\n                    na.value=\"white\")\n```\n\n## By year\n\n```{r fig.width=9, fig.height=4, fig.align='center'}\nggplot(maintainer_year_clean, aes(x=gender, fill=gender)) +\n  geom_bar() +\n  scale_fill_manual(\"\", values=c(\"female\"=\"#fc8d59\", \"male\"=\"#2166ac\"),\n                    na.value=\"white\") +\n  facet_wrap(~year)\n```\n\n## \n\n```{r fig.width=9, fig.height=4, fig.align='center'}\nggplot(maintainer_year_clean, aes(x=year, fill=gender)) +\n  geom_bar() +\n  scale_fill_manual(\"\", values=c(\"female\"=\"#fc8d59\", \"male\"=\"#2166ac\"),\n                    na.value=\"white\")\n```\n\n## Focus on proportions\n\n```{r fig.width=9, fig.height=4, fig.align='center'}\nggplot(maintainer_year_clean, aes(x=product(year), fill=gender)) +\n  geom_mosaic() +\n  scale_fill_manual(\"\", values=c(\"female\"=\"#fc8d59\", \"male\"=\"#2166ac\"),\n                    na.value=\"white\")\n```\n\n\n## {.white}\n\n<img class=\"cover\" src=\"images/keep_calm_and_r_lady_on.png\" alt=\"\", width=2000>\n\n\n",
    "created" : 1518370878995.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1252211069",
    "id" : "C1B8632B",
    "lastKnownWriteTime" : 1518467385,
    "last_content_update" : 1518467385363,
    "path" : "~/Documents/Artikel & Vortraege/talks/R-ladies 2018/galentine.Rmd",
    "project_path" : "galentine.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}
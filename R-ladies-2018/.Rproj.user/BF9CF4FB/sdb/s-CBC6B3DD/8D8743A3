{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Empowering Women with Self-defense Skills using R\"\nauthor: \"Dianne Cook, Heike Hofmann, Sam Tyner\"\noutput: \n  ioslides_presentation:\n    widescreen: true\n    css: styles.css\n    logo: figure/wsds.png\n    fig_width: 5\n    fig_height: 5\n    fig_caption: true\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(message = FALSE, warning = FALSE, cache = FALSE)\nlibrary(dplyr)\nlibrary(readr)\n```\n\n# Empowering Women with Self-defense Skills using R\n\n\n## The Instructors {.smaller}\n\n<div class=\"columns-2\">\n  <img src=\"figure/heike.jpg\" width=\"200\">\n  <img src=\"figure/dicook.png\" width=\"175\">\n  <img src=\"figure/sam.jpg\" width=\"170\">\n\n<br>\nHeike Hofmann<br>\nProfessor<br>\nDepartment of Statistics<br>\nIowa State University<br><br>\n\n\nDianne Cook<br>\nProfessor<br>\nDepartment of Econometrics and Business Statistics\nMonash University<br><br>\n\n  \n  \nSam Tyner<br>\nPhD Candidate<br>\nDepartment of Statistics<br>\nIowa State University<br><br>\n\n</div>\n\n## Plan for the Workshop\n\n\n1. Scraping polling data <br>\n\n2. genderizer package/API <br>\n\n3. Female authors of R packages<br><br>\n\n\n## Follow along\n\nAll Resources are available from GitHub at [https://github.com/dicook/WSDS-selfdefense](https://github.com/dicook/WSDS-selfdefense)\n\n- Download the repo (zip or download to desktop)\n\n- Double-click the R project `WSDS-selfdefense.Rproj`\n\n- `slides.Rmd` contains this set of slides (and the code)\n\n- Do you have the newest version of R? some packages we use need `R 3.3.1` \n\n# Scraping the web\n\n## An Example {.smaller}\n\nThe website RealClearPolitics tracks poll results for this presidential election\n\nPolls of Clinton versus Trump at the national level available at \n[http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html](http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html)\n\n<img src=\"figure/rcp.png\" alt=\"RCP Averages\" style=\"width:608px;height:456px;\">\n\n## The Goal of this exercise is to \n\n- get the polls from the RCP website\n- clean the data\n- visualize it\n\n## Scraping the data\n\n- resources used:   `rvest` and `xml2` packages\n\n- general code idea:\n\n```\nurl <- \"your url goes here\"\ndoc <- xml2::read_html(url)\ntables <- rvest::html_table(doc)\n```\n`tables` consists of a list of all tables at the specified URL\n\n## RCP national polls\n\n```{r cache=FALSE}\nurl <- \"http://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html\"\ndoc <- xml2::read_html(url) \ntables <- rvest::html_table(doc) \ntables %>% purrr::map(.f = dim) \n```\n\n## Raw data {.smaller}\n\n```{r}\nraw <- tables[[4]]\ntail(raw)\n```\n\nFirst impressions: `r nrow(raw)` polls dating back to May ... but that's May 2015!\n\n## Data Cleaning Checklist\n\n\n- the poll names in `Poll` are strange\n- the dates in `Date` need to be separated into a start date and end date\n- the variable `Sample` consists of two pieces of information: the number of participants and the type of voters\n- the variable `Spread` consists of multiple pieces, but that doesn't matter\n- rename variables: Clinton (D) and Trump (R) to Clinton and Trump\n- we need to convert the date variables into actual dates\n- use only the first 118 poll results (all polls since July 2016)\n- the first value is `RCP Average` - that's not a poll\n\n## Data Cleaning (1) {.smaller}\n\n- the dates in `Date` need to be separated into a start date and end date\n\n```\nseparate <- function (data, col, into, sep = \"[^[:alnum:]]+\", remove = TRUE, \n    convert = FALSE, extra = \"warn\", fill = \"warn\", ...) \n```\n\n```{r}\nlibrary(tidyr)\npolls <- raw %>% separate(Date, into = c(\"Start_Date\", \"End_Date\"), sep = \" - \")\nglimpse(polls)\n```\n\n## Data Cleaning (2) {.smaller}\n\n- Convert the date information into a date type (POSIXct)\n- Use only polls since July 2016\n\n```{r}\nlibrary(lubridate)\npolls <- raw[1:119, ] %>% \n  separate(Date, into = c(\"Start_Date\", \"End_Date\"), sep = \" - \") %>%\n  mutate(\n    Start_Date = ymd(paste(\"2016\", Start_Date, sep = \"/\")),\n    End_Date = ymd(paste(\"2016\", End_Date, sep = \"/\"))\n  ) \n\nstr(polls)\n```\n\n## Data Cleaning (3) {.smaller}\n\n- Separate the variable `Sample` into two pieces of information\n- Convert `Number` to a numeric variable\n- Remove first record\n\n```{r}\npolls <- polls %>%\n  separate(Sample, into = c(\"Number\", \"Type\")) %>%\n  mutate(\n    Number = as.numeric(Number)\n  ) %>% filter(Poll != \"RCP Average\")\nnames(polls)[7:8] <- c(\"Clinton\", \"Trump\")\n\nstr(polls)\nwrite.csv(polls, file= \"data/polls.csv\", row.names=FALSE)\n```\n\n## Data cleaning recap\n\n- Getting the data was much easier than cleaning it\n- Generalization of data cleaning not possible\n- Cleaning poll names out of reach for now\n- Resources for cleaning: `lubridate` (dates and times), `tidyr` (data wrangling), `dplyr` (data flow)\n\n\n... and we are not done yet!\n\nNest steps: \n\n- combine all pollsters with fewer than five polls into `Other`\n \n\n## Data Cleaning (4) {.smaller}\n\n```{r}\nlibrary(ggplot2)\npolls <- polls %>% mutate(\n    Poll = reorder(Poll, Poll, length)\n  ) \npolls %>% \n  ggplot(aes(Poll)) + geom_bar() + coord_flip()\n```\n\n## Data Cleaning (5) {.smaller}\n\n- combine all pollsters with fewer than five polls into `Other`\n\n```{r fig.height =4}\nlevels(polls$Poll)[1:15] <- \"Other\"\n\npolls %>% \n  ggplot(aes(Poll)) + geom_bar() + coord_flip()\n```\n\n## Visualization\n\n```{r echo = FALSE, fig.height = 5.5, fig.width = 9, fig.align = \"center\"}\nlibrary(ggplot2)\nbrewer_cols <- RColorBrewer::brewer.pal(9, \"Paired\") # only palette with nine values without grey\n\npolls %>% \n  ggplot(aes(x = End_Date, y = Clinton - Trump)) +\n    annotate(\"text\", x = ymd(\"2016/07/1\"), y = 10, label = \"Clinton\", \n             size = 30, colour = \"grey90\", hjust=0) +\n    annotate(\"text\", x = ymd(\"2016/07/1\"), y = -10, label = \"Trump\", \n             size = 30, colour = \"grey90\", hjust=0) +\n    geom_hline(yintercept = 0, colour = \"grey80\") + \n    geom_smooth(se = FALSE, colour = \"grey50\") +\n    geom_point(aes(colour = Poll), size = 2.5) +\n    geom_segment(aes(colour = Poll, yend = Clinton - Trump, xend = Start_Date)) +\n    theme_bw() + \n    theme(legend.position = \"bottom\") + \n    scale_colour_manual(\"Pollster\", values = c(\"grey70\", brewer_cols), \n                        guide = guide_legend(nrow = 3)) +\n  ylim(c(-15, 15)) +\n  ylab(\"Percentage Point Difference\") +\n  xlab(\"Date\")\n```\n\n## Code for Visualization {.smaller}\n\n```\nlibrary(ggplot2)\nbrewer_cols <- RColorBrewer::brewer.pal(9, \"Paired\") # only palette with nine values without grey\n\npolls %>% \n  ggplot(aes(x = End_Date, y = Clinton - Trump)) +\n    annotate(\"text\", x = ymd(\"2016/07/1\"), y = 10, label = \"Clinton\", \n             size = 30, colour = \"grey90\", hjust=0) +\n    annotate(\"text\", x = ymd(\"2016/07/1\"), y = -10, label = \"Trump\", \n             size = 30, colour = \"grey90\", hjust=0) +\n    geom_hline(yintercept = 0, colour = \"grey80\") + \n    geom_smooth(se = FALSE, colour = \"grey50\") +\n    geom_point(aes(colour = Poll), size = 2.5) +\n    geom_segment(aes(colour = Poll, yend = Clinton - Trump, xend = Start_Date)) +\n    theme_bw() + \n    theme(legend.position = \"bottom\") + \n    scale_colour_manual(\"Pollster\", values = c(\"grey70\", brewer_cols), \n                        guide = guide_legend(nrow = 3)) +\n  ylim(c(-15, 15)) +\n  ylab(\"Percentage Point Difference\") +\n  xlab(\"Date\")\n```\n## Visualization Recap\n\n- there is huge variability in polls and between pollsters\n- house effect of some pollsters is enormous (cf. LA Times versus NBC News)\n\n\n# Your Turn\n\n## Exercise\n\n- RealClearPolitics shows all state-level poll results from last week at [http://www.realclearpolitics.com/epolls/latest_polls/state/](http://www.realclearpolitics.com/epolls/latest_polls/state/)\n- Read the data from the website\n- Identify the data format\n- Make a plan for processing the data\n- Start working on this process for one of the data sets\n- Assess the possibility of automating the process (i.e. write function, use repeatedly)\n\n## Alternate Exercise\n\n- Do you have an idea on how to fix the Poll names?\n\n```{r}\nlevels(polls$Poll)\n```\n\n\n# genderize\n\n## \n\n<img src=\"figure/genderize.png\" alt=\"genderize.io\" style=\"width:800px;vertical-align:top;float:right;\">\n\n## `genderizeR` package {.smaller}\n\nKamil Wais (2016). genderizeR: Gender Prediction Based on First Names. R\n  package version 2.0.0. https://CRAN.R-project.org/package=genderizeR\n  \n```{r results='hide'}\nlibrary(genderizeR)\n\ngivenNames <- findGivenNames(c(\"heike\", \"di\", \"sam\", \"samantha\", \"jiayang\", \"bin\", \"german\", \"christian\"))\n```\n```{r}\ngivenNames\n```\n\n##\n\n- results from findGivenNames build database to be used in `genderize` function \n- genderize.io API restricts to at most free 1000 checks a day\n- genderize.io  allows for country specification, but `findGivenNames` doesn't support that yet\n\n# R package authors\n\n## Collect the list from RStudio's CRAN mirror\n\n- Download package details from [http://cran.rstudio.com//web/packages/packages.rds](http://cran.rstudio.com//web/packages/packages.rds)\n\n```{r}\ndb <- readRDS(\"data/packages.rds\")\nglimpse(db)\n```\n\n## Clean up\n\n```{r eval=FALSE}\nclean_up <- function(x){\n  # get rid of punctuation\n  x1 <- gsub(\"[[:punct:]]\", \" \", x)\n  # remove leading space before first name\n  x2 <- str_trim(x1 , side=\"left\")\n  # get first name only\n  x3 <- unlist(lapply(x2, first.word))\n  # gender function only takes lower case\n  x4 <- tolower(x3)\n  return(x4)\n}\n```\n\n```{r echo=FALSE}\nlibrary(stringr)\nlibrary(Hmisc)\nmaintainer_year_unclean <- data.frame(db) %>% transmute(\n    name = Maintainer,\n    year = as.integer(substr(Published, 1, 4)),\n    author = Author,\n    title = Title\n  )\n\nclean_up <- function(x){\n  # get rid of punctuation\n  x1 <- gsub(\"[[:punct:]]\", \" \", x)\n  # remove leading space before first name\n  x2 <- str_trim(x1 , side=\"left\")\n  # get first name only\n  x3 <- unlist(lapply(x2, first.word))\n  # gender function only takes lower case\n  x4 <- tolower(x3)\n  return(x4)\n}\nmaintainer_year_clean <- maintainer_year_unclean %>% mutate(\n  firstname = clean_up(name)\n)\n```\n\n##\n\n```{r eval=FALSE}\nmaintainer_year_unclean <- data.frame(db) %>% transmute(\n    name = Maintainer,\n    year = as.integer(substr(Published, 1, 4)),\n    author = Author,\n    title = Title\n  )\nmaintainer_year_clean <- maintainer_year_unclean\nmaintainer_year_clean$firstname <- clean_up(maintainer_year_clean$name)\n```\n\n```{r}\nglimpse(maintainer_year_clean)\n```\n\n## Manually edited name list\n\n- First names of maintainers of R packages, genderized in March 2016\n- Manually edited to give some guesses for non-European names\n\n```{r}\ngenderized_names <- read_csv(\"data/all_names_manual.csv\")\nmaintainer_year_clean <- left_join(maintainer_year_clean,\n                                   genderized_names, by=\"firstname\")\nglimpse(maintainer_year_clean)\n```\n\n## Create summaries\n\n```{r}\nmaintainer_year_clean %>% group_by(gender) %>% tally()\n```\n\n## Plot counts\n\n```{r fig.width=5, fig.height=4, fig.align='center'}\nggplot(maintainer_year_clean, aes(x=gender, fill=gender)) +\n  geom_bar() +\n  scale_fill_manual(\"\", values=c(\"female\"=\"#fc8d59\", \"male\"=\"#2166ac\"),\n                    na.value=\"white\")\n```\n\n## By year\n\n```{r fig.width=9, fig.height=4, fig.align='center'}\nggplot(maintainer_year_clean, aes(x=gender, fill=gender)) +\n  geom_bar() +\n  scale_fill_manual(\"\", values=c(\"female\"=\"#fc8d59\", \"male\"=\"#2166ac\"),\n                    na.value=\"white\") +\n  facet_wrap(~year)\n```\n\n## \n\n```{r fig.width=9, fig.height=4, fig.align='center'}\nggplot(maintainer_year_clean, aes(x=year, fill=gender)) +\n  geom_bar() +\n  scale_fill_manual(\"\", values=c(\"female\"=\"#fc8d59\", \"male\"=\"#2166ac\"),\n                    na.value=\"white\")\n```\n\n## Focus on proportions\n\n```{r fig.width=9, fig.height=4, fig.align='center'}\nggplot(maintainer_year_clean, aes(x=year, fill=gender)) +\n  geom_bar(position = \"fill\") +\n  scale_fill_manual(\"\", values=c(\"female\"=\"#fc8d59\", \"male\"=\"#2166ac\"),\n                    na.value=\"white\")\n```\n\n# Your Turn\n\n## Exercise \n\n- Extract the author first names from the R package details\n- Match the names to gender\n- Make some summaries of the gender statistics\n\n## That's all\n\nHappy hacking!!",
    "created" : 1518457629202.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2843438654",
    "id" : "8D8743A3",
    "lastKnownWriteTime" : 1477240671,
    "last_content_update" : 1477240671,
    "path" : "~/Documents/Teaching/Women in DS/WSDS-selfdefense/slides.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}